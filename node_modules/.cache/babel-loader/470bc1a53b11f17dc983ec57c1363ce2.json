{"ast":null,"code":"const clientId = \"23acefe8f62d4734b4967d252a30de11\";\nconst redirectUri = \"http://localhost:3000/\";\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) return [];\n      return jsonResponse.tracks.items.map(track => {\n        const trackData = {\n          id: track.id,\n          name: track.name,\n          artists: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n        return trackData;\n      });\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) return;\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n  }\n\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","trackData","id","name","artists","album","uri","savePlaylist","trackUris","length"],"sources":["/Users/shashankbr/Desktop/Code/FullStackCareerPath/jammming/src/util/Spotify.js"],"sourcesContent":["const clientId = \"23acefe8f62d4734b4967d252a30de11\";\nconst redirectUri = \"http://localhost:3000/\";\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        if (!jsonResponse.tracks) return [];\n        return jsonResponse.tracks.items.map((track) => {\n          const trackData = {\n            id: track.id,\n            name: track.name,\n            artists: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri,\n          };\n          return trackData;\n        });\n      });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) return;\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n  },\n};\n\nexport default Spotify;\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAjB;AACA,MAAMC,WAAW,GAAG,wBAApB;AACA,IAAIC,WAAJ;AAEA,MAAMC,OAAO,GAAG;EACdC,cAAc,GAAG;IACf,IAAIF,WAAJ,EAAiB;MACf,OAAOA,WAAP;IACD;;IAED,MAAMG,gBAAgB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAzB;IACA,MAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAvB;;IACA,IAAIJ,gBAAgB,IAAIK,cAAxB,EAAwC;MACtCR,WAAW,GAAGG,gBAAgB,CAAC,CAAD,CAA9B;MACA,MAAMM,SAAS,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAD,CAAf,CAAxB;MACAJ,MAAM,CAACO,UAAP,CAAkB,MAAOX,WAAW,GAAG,EAAvC,EAA4CS,SAAS,GAAG,IAAxD;MACAL,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;MACA,OAAOb,WAAP;IACD,CAND,MAMO;MACL,MAAMc,SAAS,GAAI,oDAAmDhB,QAAS,kEAAiEC,WAAY,EAA5J;MACAK,MAAM,CAACC,QAAP,GAAkBS,SAAlB;IACD;EACF,CAlBa;;EAoBdC,MAAM,CAACC,IAAD,EAAO;IACX,MAAMhB,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;IACA,OAAOe,KAAK,CAAE,kDAAiDD,IAAK,EAAxD,EAA2D;MACrEE,OAAO,EAAE;QACPC,aAAa,EAAG,UAASnB,WAAY;MAD9B;IAD4D,CAA3D,CAAL,CAKJoB,IALI,CAKEC,QAAD,IAAc;MAClB,OAAOA,QAAQ,CAACC,IAAT,EAAP;IACD,CAPI,EAQJF,IARI,CAQEG,YAAD,IAAkB;MACtB,IAAI,CAACA,YAAY,CAACC,MAAlB,EAA0B,OAAO,EAAP;MAC1B,OAAOD,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA+BC,KAAD,IAAW;QAC9C,MAAMC,SAAS,GAAG;UAChBC,EAAE,EAAEF,KAAK,CAACE,EADM;UAEhBC,IAAI,EAAEH,KAAK,CAACG,IAFI;UAGhBC,OAAO,EAAEJ,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBD,IAHV;UAIhBE,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYF,IAJH;UAKhBG,GAAG,EAAEN,KAAK,CAACM;QALK,CAAlB;QAOA,OAAOL,SAAP;MACD,CATM,CAAP;IAUD,CApBI,CAAP;EAqBD,CA3Ca;;EA6CdM,YAAY,CAACJ,IAAD,EAAOK,SAAP,EAAkB;IAC5B,IAAI,CAACL,IAAD,IAAS,CAACK,SAAS,CAACC,MAAxB,EAAgC;IAChC,MAAMpC,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;IACA,MAAMgB,OAAO,GAAG;MACdC,aAAa,EAAG,UAASnB,WAAY;IADvB,CAAhB;EAGD;;AAnDa,CAAhB;AAsDA,eAAeC,OAAf"},"metadata":{},"sourceType":"module"}