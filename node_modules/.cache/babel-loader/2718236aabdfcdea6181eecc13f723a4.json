{"ast":null,"code":"var clientId=\"23acefe8f62d4734b4967d252a30de11\";var redirectUri=\"unwritten-gold.surge.sh\";var accessToken;var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}var accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);window.setTimeout(function(){return accessToken=\"\";},expiresIn*1000);window.history.pushState(\"Access Token\",null,\"/\");return accessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);window.location=accessUrl;}},search:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks)return[];return jsonResponse.tracks.items.map(function(track){var trackData={id:track.id,name:track.name,artists:track.artists[0].name,album:track.album.name,uri:track.uri};return trackData;});});},savePlaylist:function savePlaylist(name,trackUris){if(!name||!trackUris.length)return;var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userId;return fetch(\"https://api.spotify.com/v1/me\",{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:\"POST\",body:JSON.stringify({name:name})}).then(function(response){return response.json();}).then(function(jsonResponse){var playlistId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\"),{headers:headers,method:\"POST\",body:JSON.stringify({uris:trackUris})});});});}};export default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","trackData","id","name","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"sources":["/Users/shashankbr/Desktop/Code/FullStackCareerPath/jammming/src/util/Spotify.js"],"sourcesContent":["const clientId = \"23acefe8f62d4734b4967d252a30de11\";\nconst redirectUri = \"unwritten-gold.surge.sh\";\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        if (!jsonResponse.tracks) return [];\n        return jsonResponse.tracks.items.map((track) => {\n          const trackData = {\n            id: track.id,\n            name: track.name,\n            artists: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri,\n          };\n          return trackData;\n        });\n      });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) return;\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    let userId;\n\n    return fetch(\"https://api.spotify.com/v1/me\", { headers })\n      .then((response) => {\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        userId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n          headers,\n          method: \"POST\",\n          body: JSON.stringify({ name: name }),\n        })\n          .then((response) => response.json())\n          .then((jsonResponse) => {\n            const playlistId = jsonResponse.id;\n            return fetch(\n              `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\n              {\n                headers,\n                method: \"POST\",\n                body: JSON.stringify({ uris: trackUris }),\n              }\n            );\n          });\n      });\n  },\n};\n\nexport default Spotify;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}